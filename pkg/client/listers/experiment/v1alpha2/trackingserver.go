/*
Copyright 2020 The AIScope Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

    https://vectorcloud.io
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "aiscope/pkg/apis/experiment/v1alpha2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrackingServerLister helps list TrackingServers.
// All objects returned here must be treated as read-only.
type TrackingServerLister interface {
	// List lists all TrackingServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.TrackingServer, err error)
	// TrackingServers returns an object that can list and get TrackingServers.
	TrackingServers(namespace string) TrackingServerNamespaceLister
	TrackingServerListerExpansion
}

// trackingServerLister implements the TrackingServerLister interface.
type trackingServerLister struct {
	indexer cache.Indexer
}

// NewTrackingServerLister returns a new TrackingServerLister.
func NewTrackingServerLister(indexer cache.Indexer) TrackingServerLister {
	return &trackingServerLister{indexer: indexer}
}

// List lists all TrackingServers in the indexer.
func (s *trackingServerLister) List(selector labels.Selector) (ret []*v1alpha2.TrackingServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.TrackingServer))
	})
	return ret, err
}

// TrackingServers returns an object that can list and get TrackingServers.
func (s *trackingServerLister) TrackingServers(namespace string) TrackingServerNamespaceLister {
	return trackingServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrackingServerNamespaceLister helps list and get TrackingServers.
// All objects returned here must be treated as read-only.
type TrackingServerNamespaceLister interface {
	// List lists all TrackingServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.TrackingServer, err error)
	// Get retrieves the TrackingServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.TrackingServer, error)
	TrackingServerNamespaceListerExpansion
}

// trackingServerNamespaceLister implements the TrackingServerNamespaceLister
// interface.
type trackingServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrackingServers in the indexer for a given namespace.
func (s trackingServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.TrackingServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.TrackingServer))
	})
	return ret, err
}

// Get retrieves the TrackingServer from the indexer for a given namespace and name.
func (s trackingServerNamespaceLister) Get(name string) (*v1alpha2.TrackingServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("trackingserver"), name)
	}
	return obj.(*v1alpha2.TrackingServer), nil
}
